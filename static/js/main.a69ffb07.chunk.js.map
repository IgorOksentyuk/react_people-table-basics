{"version":3,"sources":["components/Navigation.tsx","components/Home.tsx","components/NotFound.tsx","components/Loader/Loader.tsx","api.ts","components/PersonLink.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","App.tsx","index.tsx"],"names":["Navigation","getLinkClass","isActive","classNames","className","role","to","Home","NotFound","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","person","people","findedMother","find","p","name","motherName","findedFather","fatherName","selectedPerson","useParams","slug","sex","born","died","PeopleTable","loading","length","map","PeoplePage","useState","peopleFromServer","setPeopleFromServer","setLoading","error","setError","useEffect","catch","finally","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.a69ffb07.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navigation = () => {\n  const getLinkClass = ({ isActive }: { isActive: boolean }) => {\n    return classNames(\n      'navbar-item',\n      { 'has-background-grey-lighter': isActive },\n    );\n  };\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const Home = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const NotFound = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Link, useParams } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n  people: Person[],\n};\n\nexport const PersonLink: React.FC<Props> = ({ person, people }) => {\n  const findedMother = people.find(p => p.name === person.motherName);\n  const findedFather = people.find(p => p.name === person.fatherName);\n\n  const { slug } = useParams();\n  const selectedPerson = slug || '';\n\n  return (\n    <tr\n      data-cy=\"person\"\n      key={person.slug}\n      className={classNames({\n        'has-background-warning': selectedPerson === person.slug,\n      })}\n    >\n      <td>\n        <Link\n          to={`${person.slug}`}\n          className={person.sex === 'f'\n            ? 'has-text-danger'\n            : ''}\n        >\n          {person.name}\n        </Link>\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {findedMother ? (\n          <Link\n            to={`${findedMother.slug}`}\n            className=\"has-text-danger\"\n          >\n            {person.motherName}\n          </Link>\n        ) : person.motherName || '-'}\n\n      </td>\n\n      <td>\n        {findedFather ? (\n          <Link to={`${findedFather.slug}`}>\n            {person.fatherName}\n          </Link>\n        ) : person.fatherName || '-'}\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  people: Person[],\n  loading: boolean,\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, loading }) => {\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          people.length > 0\n          && (people.map(person => (\n            <PersonLink\n              key={person.slug}\n              person={person}\n              people={people}\n            />\n          )))\n        }\n\n        {people.length === 0 && !loading && (\n          <tr data-cy=\"noPeopleMessage\">\n            <td>There are no people on the server</td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { PeopleTable } from './PeopleTable';\n\nexport const PeoplePage = () => {\n  const [peopleFromServer, setPeopleFromServer] = useState<Person[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getPeople()\n      .then(setPeopleFromServer)\n      .catch(() => setError(true))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {loading && <Loader />}\n\n          {error && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {!error && !loading\n            && <PeopleTable people={peopleFromServer} loading={loading} />}\n        </div>\n      </div>\n    </>\n  );\n};\n","import './App.scss';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Navigation } from './components/Navigation';\nimport { Home } from './components/Home';\nimport { NotFound } from './components/NotFound';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navigation />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"/people\" element={<PeoplePage />}>\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<NotFound />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}